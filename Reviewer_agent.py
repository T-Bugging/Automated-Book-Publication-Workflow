def aiReviewer(writerOutput):
    import os 
    import google.generativeai as googleAI
    from dotenv import load_dotenv
    from ChromaDB import addDocument
    import uuid

    # Load environment variables
    load_dotenv()
    api_key = os.getenv("GEMINI_API_KEY")
    googleAI.configure(api_key=api_key)

    # Load the model
    model = googleAI.GenerativeModel("gemini-2.0-flash")

    with open("output/Raw_text/text_1.txt", "r", encoding="utf-8") as file:
        storyContent = file.read()

    # Function that reviews the spun text against the original story.
    def review(spun, original):
        print("---------------------------------------------------")
        # Provided two choices, the custom choice is provided keeping in mind the human-in-loop aspect of the AI system.
        print("Review Choice")
        print("1. Default: Review the story for clarity, grammar, and flow while maintaining originality.")
        print("2. Custom : Review the story with your own custom prompt.")
        reviewChoice = input("Enter your review choice (1-2): ")

        # Default prompt for the reviewer.
        if reviewChoice == "1":
            reviewerPrompt = (
                "You are a professional editor. You are given an original story and a rewritten version generated by an AI writer. "
                "Your job is to review and improve the rewritten version for grammar, clarity, and coherence. "
                "Ensure that the rewritten version maintains the meaning and tone of the original. "
                "Do not introduce new content. Do not copy the original â€” refine the rewritten version only.Rewrite it in the same number of words as the spun version text.\n\n"
                "Spun:\n" + spun + "\n\nOriginal:\n" + original
            )

        # Custom prompt for the reviewer.
        elif reviewChoice == "2":
            customPrompt = input("Enter your custom review prompt: ")
            reviewerPrompt = (
                customPrompt +
                " Use the instruction as your primary guidance. However, you should still ensure that the rewritten version is grammatically correct, clearly written, and faithful to the meaning of the original story. "
                "Do not introduce new content or revert to the original.Rewrite it in the same number of words as the spun version text.\n\n"
                "Spun:\n" + spun + "\n\nOriginal:\n" + original
            )
        # Handling invalid input.
        else:
            print("Invalid choice.")
            return

        # Generating content based on the prompt.
        reviewerResponse = model.generate_content(reviewerPrompt)

        # Print the response from the reviewer.
        print(reviewerResponse.text)
        print("---------------------------------------------------")
        print("Review completed successfully.")

        # Asking the human reviewer for acceptance of the review.
        print("Do you accept the review?")
        userAcceptance = input("1.Accept the review.\n2.Retry with new prompt (1-2): ")

        # Case 1 : They accept, after which the reviewed story is saved to a file and added to the ChromaDB.
        if userAcceptance == "1":
            print("Review accepted.")
            spunFile = [f for f in os.listdir("output/Spun_text") if f.startswith("reviewed_") and f.endswith(".txt")]
            spunNumber = len(spunFile) + 1
            spunPath = f"output/Spun_text/spunText_{spunNumber}.txt"

            # Add the reviewed story to the ChromaDB
            docID = str(uuid.uuid4())
            addDocument(docID,
                         reviewerResponse.text, 
                         metadata={"type": "reviewed", "title": input("Enter the title of the story: ")})
            print(f"Document added to ChromaDB with ID: {docID}")


    # Save reviewed story to file
            with open(spunPath, "w", encoding="utf-8") as f:
                f.write(reviewerResponse.text)

        
        # Case 2 : They want to retry with a new prompt, in which case the review function is called again with the same spun and original text.
        elif userAcceptance == "2":
            print("Retrying with new prompt.")
            review(spun, original)

    # Call the internal loop function with loaded content
    review(writerOutput, storyContent)